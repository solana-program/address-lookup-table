//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>

use {
    borsh::{BorshDeserialize, BorshSerialize},
    kaigan::types::RemainderVec,
    solana_program::pubkey::Pubkey,
};

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AddressLookupTable {
    pub discriminator: u32,
    pub deactivation_slot: u64,
    pub last_extended_slot: u64,
    pub last_extended_slot_start_index: u8,
    pub authority: Option<Pubkey>,
    pub padding: u16,
    pub addresses: RemainderVec<Pubkey>,
}

impl AddressLookupTable {
    pub fn create_pda(
        authority: Pubkey,
        recent_slot: u64,
        bump: u8,
    ) -> Result<solana_program::pubkey::Pubkey, solana_program::pubkey::PubkeyError> {
        solana_program::pubkey::Pubkey::create_program_address(
            &[
                authority.as_ref(),
                recent_slot.to_string().as_ref(),
                &[bump],
            ],
            &crate::ADDRESS_LOOKUP_TABLE_ID,
        )
    }

    pub fn find_pda(authority: &Pubkey, recent_slot: u64) -> (solana_program::pubkey::Pubkey, u8) {
        solana_program::pubkey::Pubkey::find_program_address(
            &[authority.as_ref(), recent_slot.to_string().as_ref()],
            &crate::ADDRESS_LOOKUP_TABLE_ID,
        )
    }

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for AddressLookupTable {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}
